class Solution {
    List<Integer> li = new ArrayList<Integer>();
    List<Integer> temp = new ArrayList<Integer>();
    public List<Integer> postorderTraversal(TreeNode root) {
//         if(root==null)return li;
//         temp = postorderTraversal(root.left);
       
//         temp = postorderTraversal(root.right);
            
//         li.add(root.val);
        
//         return li;
        
        //trivial -_-
        
       //iterative: using 2 stacks 
        
        Stack<TreeNode> st1 = new Stack<TreeNode>();
        Stack<TreeNode> st2 = new Stack<TreeNode>();
        st1.push(root);
        
       while(!st1.isEmpty()){
            TreeNode node = st1.pop();
           
           
           if(node!=null){
           if(node.left != null)
            st1.push(node.left);
            if(node.right != null)
            st1.push(node.right);
              st2.push(node);
               //st2.push(st1.pop());
           
           }else{
               if(st1.isEmpty())break;
           
           //st2.push(st1.pop());
           }
           //st1.push(st2.peek());
           
            
            
            //li.add(node.left.val);
           
           

        }
        while(!st2.isEmpty())li.add(st2.pop().val);
        return li;
        
        
        
    }
}