class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
       // HashSet<List<Integer>> s = new HashSet<>();
        //NAIVE
//         int i=0,j=0,k=0;
//         for(i=0; i< nums.length; i++){
//             for(j=i+1; j< nums.length; j++){
//                 List<Integer> temp = new ArrayList<Integer>();
//                  for(k=j+1; k< nums.length; k++){
                    
//                      if(nums[i]+nums[j]+nums[k]==0){
//                      temp.add(nums[i]);
//                     temp.add(nums[j]);
//                     temp.add(nums[k]);
//                      Collections.sort(temp);
//                      s.add(temp);
//                      temp= new ArrayList<Integer>();
//                      }
                  
//                  }
                
//             }
//         }
        
//          List<List<Integer>> f = new ArrayList<>();
//         for(List<Integer> var : s)
//             f.add(var);
//         return f;
        //best 2pointer method
        int i=0,lo=1,hi=nums.length-1;
        Arrays.sort(nums);
        for(i=0; i<nums.length-2; i++){
            if(i>0 && nums[i]==nums[i-1]){
                //i++;
                continue;
            }
            lo=i+1; hi=nums.length-1;
            while(lo<hi){
                
                if(nums[lo]+nums[hi]== -nums[i]){
                 ans.add(Arrays.asList(nums[i],nums[lo],nums[hi]));
                    //lo++;hi--;
                    //ans.add(temp);
                    //temp = new ArrayList<Integer>();
                    while(lo<hi && nums[lo]==nums[lo+1])lo++;
                    while(lo<hi && nums[hi]==nums[hi-1])hi--;
                    lo++;hi--;
            }
            else if(nums[lo]+nums[hi] < -nums[i])lo++;
            else hi--;
        }
        
    }
        return ans;
}
}