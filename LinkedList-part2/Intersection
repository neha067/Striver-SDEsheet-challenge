public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        //Set<ListNode> s = new HashSet<ListNode>();
        //naive O(n)space comp.
        // while(headA!=null){
        //     s.add(headA);
        //     headA=headA.next;
        // }
        // while(headB!=null){
        //     if(s.contains(headB))return headB;
        //     else headB=headB.next;
        // }
        // return null;
        //optimize space O(1)
        int c1=0,c2=0;
        ListNode tempA= headA;
        ListNode tempB= headB;
//         while(tempA!=null){
//             c1++;
//             tempA=tempA.next;
//         }
//         while(tempB!=null){
//             c2++;
//             tempB=tempB.next;
//         }
//         int max = Math.max(c1,c2);
//         if(c1==max){
//             for(int i=0; i<c1-c2;i++)headA=headA.next;
//         }else for(int i=0; i<c2-c1;i++)headB=headB.next;
        
//         while(headA!=null){
//             if(headA==headB)return headA;
//             headA=headA.next;
//             headB=headB.next;
//         }
//         return null;
        //best solution in space
        while(tempA!=null && tempB!=null){
             //if(tempA==null && tempB==null)return null;
            if(tempA==tempB)return tempA;
            tempA=tempA.next;
            tempB=tempB.next;
            if(tempA==null && tempB!=null)tempA=headB;
            if(tempB==null && tempA!=null)tempB=headA;
           
        }
        return null;
        
        
    }
}