class Solution {
    public boolean isPalindrome(ListNode head) {
         ListNode temp = head;
        ArrayList<Integer> arr = new ArrayList<Integer>();
        
        //burte-force
       //  int rev=0,mod=0,count=0;
       //  while(temp!=null){
       //      arr.add(temp.val);
       //      temp=temp.next;
       //      count++;
       //  }
       //  temp=head;
       // for(int i=0; i<count/2; i++){
       //      //mod = rev/10;
       //      if(arr.get(count-i-1)!=temp.val)return false;
       //      else
       //          //rev= rev/10; te
       //          temp=temp.next;
       //  }
       //  return true;
        //optimized in space
        ListNode slow=temp;
        ListNode fast=temp;
        if(fast.next==null)return true;
        while(fast.next!=null && fast.next.next!=null ){
            fast= fast.next.next;
            slow=slow.next;
        }
        
        slow.next=reverse(slow.next);
        
        slow=slow.next;
     
        fast=head;
        while(slow!=null){
            if(fast.val!=slow.val)return false;
            fast=fast.next;
            slow=slow.next;
        }
        return true;
        
    }
    public static ListNode reverse(ListNode head){
         if (head == null||head.next==null)
            return head;

        ListNode nnode = reverse(head.next);
        head.next.next = head;
        head.next = null;
        return nnode;
        
    }
}